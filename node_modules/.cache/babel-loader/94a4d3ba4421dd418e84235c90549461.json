{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(fetchData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(addData),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(allSagas);\n\nimport { call, put, takeLatest, all } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nvar createUsingAxios = function createUsingAxios(url) {\n  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return axios.post(url, payload);\n};\n\nvar fetchUsingAxios = function fetchUsingAxios(url) {\n  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return axios.get(url, payload);\n};\n\nfunction fetchData(action) {\n  var posts;\n  return _regeneratorRuntime().wrap(function fetchData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(fetchUsingAxios, \"https://jsonplaceholder.typicode.com/albums\");\n\n        case 3:\n          posts = _context.sent;\n          _context.next = 6;\n          return put({\n            type: \"FETCH_DATA_SUCCESS\",\n            result: posts\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"FETCH_DATA_FAILED\",\n            error: _context.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction addData(action) {\n  var data;\n  return _regeneratorRuntime().wrap(function addData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(createUsingAxios, \"https://jsonplaceholder.typicode.com/albums\", action.payload);\n\n        case 3:\n          data = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: \"ADD_DATA_SUCCESS\",\n            result: data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: \"ADD_DATA_FAILED\",\n            error: _context2.t0.message\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction allSagas() {\n  return _regeneratorRuntime().wrap(function allSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeLatest(\"FETCH_DATA\", fetchData), takeLatest(\"ADD_DATA\", addData)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default allSagas;","map":{"version":3,"names":["fetchData","addData","allSagas","call","put","takeLatest","all","axios","createUsingAxios","url","payload","post","fetchUsingAxios","get","action","posts","type","result","error","message","data"],"sources":["C:/ci-new/ci-rev/src/saga/saga.jsx"],"sourcesContent":["import { call, put, takeLatest, all } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nconst createUsingAxios = (url, payload = null) => {\r\n    return axios.post(url, payload);\r\n};\r\n\r\nconst fetchUsingAxios = (url, payload = null) => {\r\n    return axios.get(url,payload);\r\n};\r\n\r\n\r\nfunction* fetchData(action) {\r\n    try {\r\n        const posts = yield call(\r\n        fetchUsingAxios,\r\n        \"https://jsonplaceholder.typicode.com/albums\"\r\n      );\r\n      yield put({ type: \"FETCH_DATA_SUCCESS\", result: posts });\r\n    } catch (e) {\r\n      yield put({ type: \"FETCH_DATA_FAILED\", error: e.message });\r\n    }\r\n}\r\n\r\nfunction* addData(action) {\r\n    try {\r\n      const data = yield call(\r\n        createUsingAxios,\r\n        \"https://jsonplaceholder.typicode.com/albums\",\r\n        action.payload\r\n      );\r\n      yield put({ type: \"ADD_DATA_SUCCESS\", result: data });\r\n    } catch (e) {\r\n      yield put({ type: \"ADD_DATA_FAILED\", error: e.message });\r\n    }\r\n}\r\n\r\nfunction* allSagas() {\r\n\r\n    yield all([\r\n      takeLatest(\"FETCH_DATA\", fetchData),\r\n      takeLatest(\"ADD_DATA\", addData),\r\n    ]);\r\n  }\r\n    \r\n  export default allSagas;"],"mappings":"+CACA,oJ;;sDAWUA,S;uDAYAC,O;uDAaAC,Q;;AArCV,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAyB;EAAA,IAAnBC,OAAmB,uEAAT,IAAS;EAC9C,OAAOH,KAAK,CAACI,IAAN,CAAWF,GAAX,EAAgBC,OAAhB,CAAP;AACH,CAFD;;AAIA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACH,GAAD,EAAyB;EAAA,IAAnBC,OAAmB,uEAAT,IAAS;EAC7C,OAAOH,KAAK,CAACM,GAAN,CAAUJ,GAAV,EAAcC,OAAd,CAAP;AACH,CAFD;;AAKA,SAAUV,SAAV,CAAoBc,MAApB;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAEsB,OAAMX,IAAI,CACxBS,eADwB,EAExB,6CAFwB,CAAV;;QAFtB;UAEcG,KAFd;UAAA;UAMM,OAAMX,GAAG,CAAC;YAAEY,IAAI,EAAE,oBAAR;YAA8BC,MAAM,EAAEF;UAAtC,CAAD,CAAT;;QANN;UAAA;UAAA;;QAAA;UAAA;UAAA;UAAA;UAQM,OAAMX,GAAG,CAAC;YAAEY,IAAI,EAAE,mBAAR;YAA6BE,KAAK,EAAE,YAAEC;UAAtC,CAAD,CAAT;;QARN;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAYA,SAAUlB,OAAV,CAAkBa,MAAlB;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAEmB,OAAMX,IAAI,CACrBK,gBADqB,EAErB,6CAFqB,EAGrBM,MAAM,CAACJ,OAHc,CAAV;;QAFnB;UAEYU,IAFZ;UAAA;UAOM,OAAMhB,GAAG,CAAC;YAAEY,IAAI,EAAE,kBAAR;YAA4BC,MAAM,EAAEG;UAApC,CAAD,CAAT;;QAPN;UAAA;UAAA;;QAAA;UAAA;UAAA;UAAA;UASM,OAAMhB,GAAG,CAAC;YAAEY,IAAI,EAAE,iBAAR;YAA2BE,KAAK,EAAE,aAAEC;UAApC,CAAD,CAAT;;QATN;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAaA,SAAUjB,QAAV;EAAA;IAAA;MAAA;QAAA;UAAA;UAEI,OAAMI,GAAG,CAAC,CACRD,UAAU,CAAC,YAAD,EAAeL,SAAf,CADF,EAERK,UAAU,CAAC,UAAD,EAAaJ,OAAb,CAFF,CAAD,CAAT;;QAFJ;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAQE,eAAeC,QAAf"},"metadata":{},"sourceType":"module"}